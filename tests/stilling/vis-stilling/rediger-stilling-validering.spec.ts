import { expect, test } from '@playwright/test';

test('游뛂 Rediger stilling Validering', async ({ page }) => {
  await page.goto('http://localhost:1337/stilling/nyStilling/rediger');
  await page.getByRole('button', { name: 'Neste steg' }).click();
  await expect(
    page.locator('#textField-error-ri').getByText('Navn er p친krevd'),
  ).toBeVisible();
  await expect(
    page.locator('#textField-error-rj').getByText('Tittel er p친krevd'),
  ).toBeVisible();
  await expect(
    page
      .locator('#textField-error-rk')
      .getByText('Du m친 fylle ut enten e-post'),
  ).toBeVisible();
  await expect(
    page.getByRole('heading', { name: 'Du m친 rette disse feilene f칮r' }),
  ).toBeVisible();
  await page.goto(
    'http://localhost:1337/stilling/nyStilling/rediger?steg=om-stillingen',
  );
  await page.getByRole('button', { name: 'Neste steg' }).click();
  await expect(
    page.locator('#comboboxfield-error-rd').getByText('Velg en yrkeskategori'),
  ).toBeVisible();
  await expect(
    page
      .getByRole('paragraph')
      .filter({ hasText: 'Beskrivelse om stillingen er' }),
  ).toBeVisible();
  await expect(
    page.getByRole('paragraph').filter({ hasText: 'Du m친 velge arbeidssted' }),
  ).toBeVisible();
  await expect(
    page.getByRole('heading', { name: 'Du m친 rette disse feilene f칮r' }),
  ).toBeVisible();
  await page.getByRole('checkbox', { name: 'Adresse' }).check();
  await page.getByRole('button', { name: 'Neste steg' }).click();
  await expect(
    page
      .getByRole('paragraph')
      .filter({ hasText: 'Alle adressefelt m친 fylles ut' }),
  ).toBeVisible();
  await page.goto(
    'http://localhost:1337/stilling/nyStilling/rediger?steg=praktisk-info',
  );
  await page.getByRole('button', { name: 'Neste steg' }).click();
  await expect(
    page.getByRole('group', { name: 'Velg sektor' }).getByRole('paragraph'),
  ).toBeVisible();
  await expect(
    page
      .locator('#textField-error-rl')
      .getByText('Antall stillinger m친 fylles ut'),
  ).toBeVisible();
  await expect(
    page.getByRole('group', { name: 'Velg omfang' }).getByRole('paragraph'),
  ).toBeVisible();
  await expect(
    page.locator('#select-error-ru').getByText('Ansettelsesform m친 velges'),
  ).toBeVisible();
  await expect(
    page.getByRole('group', { name: 'Arbeidsdager' }).getByRole('paragraph'),
  ).toBeVisible();
  await expect(
    page.getByRole('group', { name: 'Arbeidstid' }).getByRole('paragraph'),
  ).toBeVisible();
  await expect(
    page
      .getByRole('paragraph')
      .filter({ hasText: 'Du m친 fylle ut enten oppstart' }),
  ).toBeVisible();
  await expect(
    page.getByRole('paragraph').filter({ hasText: 'Du m친 fylle ut enten s칮' }),
  ).toBeVisible();
  await expect(
    page.getByRole('heading', { name: 'Du m친 rette disse feilene f칮r' }),
  ).toBeVisible();
  await page.goto(
    'http://localhost:1337/stilling/nyStilling/rediger?steg=innspurt',
  );
  await page.getByText('Ja, publiser stillingen').click();
  await page.getByRole('button', { name: 'Fullf칮r og publiser' }).click();
  await expect(
    page
      .getByRole('paragraph')
      .filter({ hasText: 'Du m친 fylle ut enten e-post' }),
  ).toBeVisible();
});
