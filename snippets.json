{
  "SWR Api": {
    "prefix": "capi",
    "body": [
      "'use client';",
      "/**",
      " * Endepunkt /${TM_FILENAME_BASE}",
      " */",
      "import useSWRImmutable from 'swr/immutable';",
      "import { z } from 'zod';",
      "import { getAPIwithSchema } from '../fetcher';",
      "",
      "const ${TM_FILENAME_BASE}Endepunkt = '/api/${TM_FILENAME_BASE}';",
      "",
      "const ${TM_FILENAME_BASE/(\\\\w)([a-z]+)/${1:/capitalize}${2:/downcase}/g}Schema = z.object({});",
      "",
      "export type ${TM_FILENAME_BASE}DTO = z.infer<typeof ${TM_FILENAME_BASE/(\\\\w)([a-z]+)/${1:/capitalize}${2:/downcase}/g}Schema>;",
      "",
      "export const use${TM_FILENAME_BASE/(\\w)([a-z]+)/${1:/capitalize}${2:/downcase}/g}= () =>",
      "  useSWRImmutable(${TM_FILENAME_BASE}Endepunkt, getAPIwithSchema(${TM_FILENAME_BASE/(\\\\w)([a-z]+)/${1:/capitalize}${2:/downcase}/g}Schema));",
      ""
    ],
    "description": "SWR Api"
  },
  "Create route": {
    "prefix": "croute",
    "body": [
      "import { NextRequest, NextResponse } from \"next/server\";",
      "import { isLocal } from \"../../../../util/env\";",
      "import { proxyWithOBO } from \"../../../../util/oboProxy\";",
      "",
      "",
      "export async function GET(req: NextRequest) {",
      "  if (isLocal) {",
      "    return NextResponse.json({});",
      "  }",
      "",
      "  const { searchParams } = new URL(req.url);",
      "",
      "  const url = new URL(",
      "    `${REPLACE.api_url}${REPLACE.route}`,",
      "  );",
      "",
      "  searchParams.forEach((value, key) => {",
      "    url.searchParams.append(key, value);",
      "  });",
      "",
      "  return proxyWithOBO(url.toString(), REPLACE.scope, req);",
      "}",
      ""
    ],
    "description": "Create route"
  }
}
