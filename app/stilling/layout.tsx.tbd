// 'use client';

// import VisKandidat from '@/app/kandidat/vis-kandidat/VisKandidat';
// import { useVisKandidatNr } from '@/app/kandidat/vis-kandidat/useVisKandidatNr';
// import WindowWrapper, {
//   useWindows,
// } from '@/components/layout/windows/WindowWrapper';
// import * as React from 'react';

// // Viser stillingsinnhold i låst venstre vindu (children) og kandidat i høyre dynamiske vindu når ?visKandidatnr=... er satt.
// interface StillingWindowsProps {
//   children: React.ReactNode;
// }

// const StillingWindowsInner: React.FC = () => {
//   const { addWindow, removeWindow } = useWindows();
//   const [visKandidatnr] = useVisKandidatNr();
//   const kandidatWindowIdRef = React.useRef<string | null>(null);

//   React.useEffect(() => {
//     const currentId = kandidatWindowIdRef.current;
//     if (visKandidatnr) {
//       if (currentId) {
//         removeWindow(currentId);
//         kandidatWindowIdRef.current = null;
//       }
//       const newId = addWindow(<VisKandidat kandidatnr={visKandidatnr} />, {
//         position: 'after',
//       });
//       kandidatWindowIdRef.current = newId;
//     } else if (currentId) {
//       removeWindow(currentId);
//       kandidatWindowIdRef.current = null;
//     }
//   }, [visKandidatnr, addWindow, removeWindow]);

//   React.useEffect(() => {
//     return () => {
//       if (kandidatWindowIdRef.current)
//         removeWindow(kandidatWindowIdRef.current);
//     };
//   }, [removeWindow]);

//   return null;
// };

// const StillingWindows: React.FC<StillingWindowsProps> = ({ children }) => {
//   return (
//     <WindowWrapper>
//       {children}
//       <StillingWindowsInner />
//     </WindowWrapper>
//   );
// };

// export default StillingWindows;
