import { z } from 'zod';

const SearchTagSchema = z.object({
  label: z.string(),
  score: z.number(),
});

const OntologyJobtitleSchema = z.object({
  konseptId: z.number(),
  label: z.string(),
  styrk08: z.string(),
});

export const StillingPropertiesSchema = z.object({
  adtext: z.string().optional(),
  sourceurl: z.string().optional(),
  applicationdue: z.string().optional(),
  applicationemail: z.string().optional(),
  applicationmail: z.string().optional(),
  applicationlabel: z.union([z.string(), z.number()]).optional(),
  applicationurl: z.string().optional(),
  employer: z.string().optional(),
  employerdescription: z.union([z.string(), z.number()]).optional(),
  employerhomepage: z.string().optional(),
  engagementtype: z.string().optional(),
  extent: z.string().optional(),
  occupation: z.string().optional(),
  positioncount: z.number().optional(),
  salary: z.number().optional(),
  starttime: z.string().optional(),
  role: z.string().optional(),
  sector: z.string().optional(),
  location: z.string().optional(),
  externalref: z.union([z.string(), z.number()]).optional(),
  jobtitle: z.string().optional(),
  keywords: z.string().optional().nullable(),
  sourcecreated: z.string().optional(),
  sourceupdated: z.string().optional(),
  logomain: z.string().optional(),
  logolisting: z.string().optional(),
  author: z.string().optional(),
  address: z.union([z.string(), z.number()]).optional(),
  industry: z.string().optional(),
  nace2: z.any().optional(),
  searchtags: z.array(SearchTagSchema).optional(),
  searchtagsai: z.array(z.string()).optional(),
  classification_styrk08_score: z.number().optional(),
  classification_input_source: z.string().optional(),
  classification_styrk08_code: z.union([z.number(), z.string()]).optional(),
  classification_esco_code: z.string().optional(),
  categories: z.array(z.any()).optional(), // Replace with specific schema if known
  euresflagg: z.union([z.string(), z.boolean()]).optional(),
  hasInterestform: z.union([z.string(), z.boolean(), z.number()]).optional(),
  remote: z.string().optional(),
  workLanguage: z.union([z.string(), z.array(z.string())]).optional(),
  finnSource: z.string().optional(),
  adtextFormat: z.string().optional(),
  tags: z.array(z.string()).optional(),
  ontologyJobtitle: OntologyJobtitleSchema.optional(),
  workschedule: z.union([z.string(), z.array(z.string())]).optional(),
  workhours: z.union([z.string(), z.array(z.string())]).optional(),
  workday: z.union([z.string(), z.array(z.string())]).optional(),
  facebookpage: z.string().optional(),
  contactperson: z.string().optional(),
  contactpersontitle: z.string().optional(),
  contactpersonemail: z.string().optional(),
  contactpersonphone: z.string().optional(),
  linkedinpage: z.string().optional(),
  jobpercentage: z.union([z.string(), z.number()]).optional(),
  jobpercentagerange: z.string().optional(),
  jobarrangement: z.string().optional(),
  twitteraddress: z.string().optional(),
  admintags: z.string().optional(),
  arbeidsplassenoccupation: z.string().optional(),
  needDriversLicense: z.string().optional(),
  experience: z.string().optional(),
  copyOfExistingAd: z.string().optional(),
  under18: z.string().optional(),
  education: z.string().optional(),
  certificate: z.string().optional(),
  expertise: z.string().optional(),
  practice: z.string().optional(),
  hardrequirements: z.any().optional(), // Replace with specific schema if known
  softrequirements: z.any().optional(), // Replace with specific schema if known
  personalattributes: z.any().optional(), // Replace with specific schema if known
  _approvedby: z.string().optional(),
  _noorgnr: z.union([z.string(), z.boolean()]).optional(),
  _providerid: z.union([z.string(), z.number()]).optional(),
  _versionid: z.number().optional(),
  _score: z.any().optional(),
  _scoretotal: z.number().optional(),
});
