// import { sendEvent } from 'felles/amplitude';
// import { Jobb√∏nske } from 'felles/domene/kandidat/Jobbprofil';
// import { useEffect, useState } from 'react';
// import {
//     KandidatStillingss√∏kDTO,
//     useKandidatStillingss√∏k,
//     Geografi√ònske,
// } from '../../../api/kandidat-s√∏k-api/kandidatStillingss√∏k';
// import { Status } from '../filter/om-annonsen/Annonsestatus';
// import { Publisert } from '../filter/om-annonsen/HvorErAnnonsenPublisert';
// import useNavigering from '../useNavigering';
// import { QueryParam } from '../utils/urlUtils';
// import { getNummerFraSted, stedmappingFraGammeltNummer } from 'felles/MappingSted';

import {
  useKandidatStillingss√∏k,
  YrkeJobbonskeStillingsS√∏kDTO,
} from '../../../api/kandidat-sok/useKandidatStillingss√∏k';
import {
  getNummerFraSted,
  stedmappingFraGammeltNummer,
} from '../../../api/stillings-sok/esFiltre/fylkeOgKommuneMapping';
import { useStillingsS√∏kFilter } from '../../../stillings-sok/StillingsS√∏kContext';
import { StillingsStatusTyper } from '../../../stillings-sok/components/StillingsS√∏kFilter/StatusFilter';

const hentFylkerFraJobb√∏nsker = (
  geografijobb√∏nskenummer: string[],
): string[] => {
  return Array.from(
    new Set(
      geografijobb√∏nskenummer
        .filter((n) => n.length === 2 || n.length === 4)
        .map((n) => (n.length === 4 ? n.substring(0, 2) : n)),
    ),
  );
};

const hentKommunerFraJobb√∏nsker = (
  geografijobb√∏nskenummer: string[],
): string[] => {
  return geografijobb√∏nskenummer.filter((n) => n.length === 4);
};

const hentYrkerFraJobb√∏nsker = (
  yrkes√∏nsker: YrkeJobbonskeStillingsS√∏kDTO[],
): string[] => {
  return [
    ...new Set(
      yrkes√∏nsker
        .flatMap((yrkes√∏nske) => yrkes√∏nske.sokeTitler ?? [])
        .filter((tittel): tittel is string => tittel != null),
    ),
  ];
};

const konverterStederTilN√•v√¶rendeKoder = (
  geografikoder: (string | null)[],
): string[] => {
  const konverterteKoder = geografikoder
    .filter((kode): kode is string => kode !== null)
    .map((kode) => {
      const nyekoder = stedmappingFraGammeltNummer.get(kode)?.nummer || kode;
      return nyekoder.length > 4 ? nyekoder.substring(0, 4) : nyekoder;
    });

  const fylkesKoder = new Set(
    konverterteKoder.filter((kode) => kode.length === 2),
  );

  return konverterteKoder.filter((kode) => {
    return (
      !Array.from(fylkesKoder).some(
        (fylkesKode) => kode.startsWith(fylkesKode) && kode !== fylkesKode,
      ) && kode.length > 0
    );
  });
};

export const setKandidatStillingss√∏kData = (kandidatId: string) => {
  // const { searchParams, navigate } = useNavigering();

  console.log('üé∫ kandidatId', kandidatId);
  console.log('üé∫ er her');
  const stillingsS√∏kContext = useStillingsS√∏kFilter();

  const swrHook = useKandidatStillingss√∏k(kandidatId);

  const kandidatStillingss√∏k = swrHook.data;
  if (kandidatStillingss√∏k) {
    const { geografiJobbonsker, yrkeJobbonskerObj, kommunenummerstring } =
      kandidatStillingss√∏k;

    const geografikoder =
      geografiJobbonsker.length === 0
        ? [kommunenummerstring]
        : geografiJobbonsker
            .map((g) => getNummerFraSted(g.geografiKode))
            .filter((kode): kode is string => kode !== null);

    const konverterteGeografikoder =
      konverterStederTilN√•v√¶rendeKoder(geografikoder);

    const fylker: string[] = hentFylkerFraJobb√∏nsker(konverterteGeografikoder);
    const kommuner = hentKommunerFraJobb√∏nsker(konverterteGeografikoder);
    const yrkes√∏nsker = hentYrkerFraJobb√∏nsker(yrkeJobbonskerObj);

    if (fylker) stillingsS√∏kContext.setFylker(fylker);
    if (kommuner) stillingsS√∏kContext.setKommuner(kommuner);
    if (yrkes√∏nsker) stillingsS√∏kContext.setKategori(yrkes√∏nsker);
    stillingsS√∏kContext.setStatuser([StillingsStatusTyper.Publisert]);
  }
};

//     if (searchParams.get(QueryParam.BrukKriterierFraKandidat) === 'true') {
//       const s√∏k = new URLSearchParams();

//       if (fylker.length > 0) s√∏k.set(QueryParam.Fylker, fylker.join(','));
//       if (kommuner.length > 0)
//         s√∏k.set(QueryParam.Kommuner, kommuner.join(','));
//       if (yrkes√∏nsker.length > 0)
//         s√∏k.set(QueryParam.Tekst, yrkes√∏nsker.join(','));

//       s√∏k.set(QueryParam.Statuser, Status.Publisert);
//       s√∏k.set(QueryParam.Publisert, Publisert.Intern);

//       sendEvent('stillingss√∏k', 'kontekst_av_kandidat', {
//         antallFylker: fylker.length,
//         antallKommuner: kommuner.length,
//         antallYrkes√∏nsker: yrkes√∏nsker.length,
//       });

//       navigate({ search: s√∏k.toString() }, { replace: true });
//     }
//   }
// }, [kandidatnr, navigate, searchParams, swrHook, kandidatStillingss√∏k]);

//   return {
//     ...swrHook,
//     hentetGeografiFraBosted,
//     mangler√ònsketYrke,
//     kandidatStillingss√∏k,
//   };
// };
// };
